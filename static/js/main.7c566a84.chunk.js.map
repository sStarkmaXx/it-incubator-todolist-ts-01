{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","className","value","onChange","e","currentTarget","onKeyPress","key","onClick","EditableSpan","editMode","setEditMode","activateViewMode","onChangeTitle","autoFocus","onBlur","onDoubleClick","Todolist","task","tasks","map","item","isDone","type","newIsDoneValue","checked","changeStatus","id","todoListId","newTitle","onChangeTaskTitle","removeTask","onChangeTodolListTitle","removeTodoList","createNewTask","filter","changeFilter","App","todoList_1","v1","todoList_2","todolists","setTodolists","setTasks","todolistId","tl","copyTasks","taskID","newTask","t","tdl","taskId","todoListComponents","tasksForTodoList","getFilteredTask","newTodoListId","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7c566a84.chunk.js","sourcesContent":["import React, { useState, KeyboardEvent, ChangeEvent } from 'react';\r\n\r\nexport type AddItemFormPropsType = {\r\n  addItem: (title: string) => void;\r\n};\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = (props) => {\r\n  const [title, setTitle] = useState<string>('');\r\n  const [error, setError] = useState<string | null>(null);\r\n  const addItem = () => {\r\n    if (title.trim() !== '') {\r\n      props.addItem(title);\r\n      setTitle('');\r\n    } else {\r\n      setError('Title is required!');\r\n    }\r\n  };\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) =>\r\n    setTitle(e.currentTarget.value);\r\n\r\n  const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    setError(null);\r\n    if (e.key === 'Enter') {\r\n      addItem();\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <input\r\n        className={error ? 'error' : ''}\r\n        value={title}\r\n        onChange={onChangeTitle}\r\n        onKeyPress={onKeyPressAddTask}\r\n      />\r\n      <button onClick={addItem}>+</button>\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n","import React, { ChangeEvent, useState, KeyboardEvent } from 'react';\r\n\r\nexport type EditableSpanPropsType = {\r\n  value: string;\r\n  onChangeTitle: (newTitle: string) => void;\r\n};\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n  const [title, setTitle] = useState(props.value);\r\n  const [editMode, setEditMode] = useState<Boolean>(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  function activateViewModeOnKey(e: KeyboardEvent<HTMLInputElement>) {\r\n    if (e.key === 'Enter') {\r\n      activateViewMode();\r\n    }\r\n  }\r\n  function onChangeTitle(e: ChangeEvent<HTMLInputElement>) {\r\n    setError(null);\r\n    setTitle(e.currentTarget.value);\r\n  }\r\n  function activateEditMode() {\r\n    setEditMode(true);\r\n  }\r\n  function activateViewMode() {\r\n    if (title.trim() !== '') {\r\n      setEditMode(false);\r\n      props.onChangeTitle(title);\r\n    } else {\r\n      setError('Title is required!');\r\n    }\r\n  }\r\n  return editMode ? (\r\n    <input\r\n      value={error ? error : title}\r\n      autoFocus\r\n      onBlur={activateViewMode}\r\n      onChange={onChangeTitle}\r\n      className={error ? 'error' : ''}\r\n      onKeyPress={activateViewModeOnKey}\r\n    />\r\n  ) : (\r\n    <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n  );\r\n}\r\n\r\nexport default EditableSpan;\r\n","import React, { ChangeEvent } from 'react';\r\nimport { FilterType, TaskType } from './App';\r\nimport { AddItemForm } from './AddItemForm';\r\nimport EditableSpan from './EditableSpan';\r\n\r\ntype PropsType = {\r\n  todoListId: string;\r\n  title: string;\r\n  tasks: Array<TaskType>;\r\n  filter: FilterType;\r\n  removeTodoList: (todolistId: string) => void;\r\n  removeTask: (taskID: string, todolistId: string) => void;\r\n  createNewTask: (title: string, todolistId: string) => void;\r\n  changeFilter: (filter: FilterType, todolistId: string) => void;\r\n  changeStatus: (taskID: string, isDone: boolean, todolistId: string) => void;\r\n  onChangeTaskTitle: (\r\n    todoListId: string,\r\n    taskId: string,\r\n    newTitle: string\r\n  ) => void;\r\n  onChangeTodolListTitle: (todoListId: string, newTitle: string) => void;\r\n};\r\n\r\nexport const Todolist = (props: PropsType) => {\r\n  const addTask = (title: string) => {\r\n    props.createNewTask(title, props.todoListId);\r\n  };\r\n\r\n  const onChangeTodoListTitle = (newTitle: string) =>\r\n    props.onChangeTodolListTitle(props.todoListId, newTitle);\r\n\r\n  let task = props.tasks.map((item) => {\r\n    const removeTask = () => {\r\n      props.removeTask(item.id, props.todoListId);\r\n    };\r\n\r\n    const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n      let newIsDoneValue = e.currentTarget.checked;\r\n      props.changeStatus(item.id, newIsDoneValue, props.todoListId);\r\n    };\r\n\r\n    const onChangeTaskTitle = (newTitle: string) =>\r\n      props.onChangeTaskTitle(props.todoListId, item.id, newTitle);\r\n\r\n    return (\r\n      <li className={item.isDone ? 'is-done' : ''}>\r\n        <input type=\"checkbox\" onChange={changeStatus} checked={item.isDone} />{' '}\r\n        <EditableSpan value={item.title} onChangeTitle={onChangeTaskTitle} />\r\n        <button onClick={removeTask}>x</button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <EditableSpan\r\n          value={props.title}\r\n          onChangeTitle={onChangeTodoListTitle}\r\n        />\r\n        <button onClick={() => props.removeTodoList(props.todoListId)}>\r\n          x\r\n        </button>\r\n      </h3>\r\n      <div>\r\n        <AddItemForm addItem={addTask} />\r\n      </div>\r\n      <ul>{task}</ul>\r\n      <div>\r\n        <button\r\n          className={props.filter === 'all' ? 'active-filter' : ''}\r\n          onClick={() => props.changeFilter('all', props.todoListId)}\r\n        >\r\n          All\r\n        </button>\r\n        <button\r\n          className={props.filter === 'active' ? 'active-filter' : ''}\r\n          onClick={() => props.changeFilter('active', props.todoListId)}\r\n        >\r\n          Active\r\n        </button>\r\n        <button\r\n          className={props.filter === 'completed' ? 'active-filter' : ''}\r\n          onClick={() => props.changeFilter('completed', props.todoListId)}\r\n        >\r\n          Completed\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { v1 } from 'uuid';\r\nimport { AddItemForm } from './AddItemForm';\r\nimport './App.css';\r\nimport { Todolist } from './Todolist';\r\n\r\nexport type TaskType = {\r\n  id: string;\r\n  title: string;\r\n  isDone: boolean;\r\n};\r\n\r\nexport type TodolistType = {\r\n  id: string;\r\n  title: string;\r\n  filter: FilterType;\r\n};\r\n\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>;\r\n};\r\n\r\nexport type FilterType = 'all' | 'completed' | 'active';\r\n\r\nfunction App() {\r\n  const todoList_1 = v1();\r\n  const todoList_2 = v1();\r\n\r\n  const [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n    { id: todoList_1, title: 'What to learn', filter: 'all' },\r\n    { id: todoList_2, title: 'What to buy', filter: 'all' },\r\n  ]);\r\n\r\n  const [tasks, setTasks] = useState<TasksStateType>({\r\n    [todoList_1]: [\r\n      { id: v1(), title: 'React', isDone: true },\r\n      { id: v1(), title: 'TS', isDone: true },\r\n      { id: v1(), title: 'Redux', isDone: false },\r\n      { id: v1(), title: 'CSS', isDone: true },\r\n      { id: v1(), title: 'NodeJS', isDone: false },\r\n    ],\r\n    [todoList_2]: [\r\n      { id: v1(), title: 'Bread', isDone: true },\r\n      { id: v1(), title: 'Meat', isDone: true },\r\n      { id: v1(), title: 'Milk', isDone: false },\r\n      { id: v1(), title: 'Eggs', isDone: true },\r\n      { id: v1(), title: 'Tomatos', isDone: false },\r\n    ],\r\n  });\r\n\r\n  function changeFilter(filter: FilterType, todolistId: string) {\r\n    setTodolists(\r\n      todolists.map((tl) =>\r\n        tl.id === todolistId ? { ...tl, filter: filter } : tl\r\n      )\r\n    );\r\n  }\r\n\r\n  function addTodoList(title: string) {\r\n    let newTodoListId = v1();\r\n    let newTodoList: TodolistType = { id: newTodoListId, title, filter: 'all' };\r\n    setTodolists([newTodoList, ...todolists]);\r\n    setTasks({ ...tasks, [newTodoListId]: [] });\r\n  }\r\n\r\n  function removeTodoList(todolistId: string) {\r\n    setTodolists(todolists.filter((tl) => tl.id !== todolistId));\r\n    const copyTasks = { ...tasks };\r\n    delete copyTasks[todolistId];\r\n    setTasks(copyTasks);\r\n  }\r\n\r\n  function removeTask(taskID: string, todolistId: string) {\r\n    tasks[todolistId] = tasks[todolistId].filter((task) => task.id !== taskID);\r\n    setTasks({ ...tasks });\r\n  }\r\n\r\n  function createNewTask(title: string, todolistId: string) {\r\n    const newTask: TaskType = {\r\n      id: v1(),\r\n      title,\r\n      isDone: false,\r\n    };\r\n    const copyTasks = { ...tasks };\r\n    copyTasks[todolistId] = [newTask, ...tasks[todolistId]];\r\n    setTasks(copyTasks);\r\n  }\r\n\r\n  function changeStatus(taskID: string, isDone: boolean, todolistId: string) {\r\n    const copyTasks = { ...tasks };\r\n    copyTasks[todolistId] = tasks[todolistId].map((t) =>\r\n      t.id === taskID ? { ...t, isDone } : t\r\n    );\r\n    setTasks(copyTasks);\r\n  }\r\n  function onChangeTodolListTitle(todoListId: string, newTitle: string) {\r\n    setTodolists(\r\n      todolists.map((tdl) =>\r\n        tdl.id === todoListId ? { ...tdl, title: newTitle } : tdl\r\n      )\r\n    );\r\n  }\r\n  function onChangeTaskTitle(\r\n    todoListId: string,\r\n    taskId: string,\r\n    newTitle: string\r\n  ) {\r\n    const copyTasks = { ...tasks };\r\n    copyTasks[todoListId] = tasks[todoListId].map((task) =>\r\n      task.id === taskId ? { ...task, title: newTitle } : task\r\n    );\r\n    setTasks(copyTasks);\r\n  }\r\n  function getFilteredTask(tl: TodolistType) {\r\n    switch (tl.filter) {\r\n      case 'active':\r\n        return tasks[tl.id].filter((t) => t.isDone === false);\r\n      case 'completed':\r\n        return tasks[tl.id].filter((t) => t.isDone === true);\r\n      default:\r\n        return tasks[tl.id];\r\n    }\r\n  }\r\n\r\n  const todoListComponents = todolists.map((tl) => {\r\n    const tasksForTodoList = getFilteredTask(tl);\r\n    return (\r\n      <Todolist\r\n        key={tl.id}\r\n        todoListId={tl.id}\r\n        title={tl.title}\r\n        tasks={tasksForTodoList}\r\n        filter={tl.filter}\r\n        removeTodoList={removeTodoList}\r\n        removeTask={removeTask}\r\n        createNewTask={createNewTask}\r\n        changeFilter={changeFilter}\r\n        changeStatus={changeStatus}\r\n        onChangeTaskTitle={onChangeTaskTitle}\r\n        onChangeTodolListTitle={onChangeTodolListTitle}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AddItemForm addItem={addTodoList} />\r\n      {todoListComponents}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}